quant<-round(bet*(money-need2buy)/Cl(market)[d],0)
if(quant>0)
orders<-rbind(orders,data.frame(order=c(1,-1,-1),order.type=c(1,2,3),val=c(quant,Cl(market)[d]*(1+exp.prof),Cl(market)[d]*(1-max.loss)),action=c('open','close','close'),posID=c(NA,NA,NA)))
}
orders
}
start<-1
len.train<-1000
len.test<-500
train<-start:(start+len.train-1)
test<-(start+len.train):(start+len.train+len.test-1)
data("GSPC")
date<-rownames(Tdata.train[start+len.train,])
marketTP<-GSPC[paste(date,'/',sep=' ')][1:len.test]
library(e1071)
s<-svm(T.form,Tdata.train[train,],cost=10,gamma = 0.01)
p<-predict(s,Tdata.train[test,])
tssig<-trading.signals(p,0.1,-0.1)
simulated_trader=trading.simulator(marketTP,signals = tssig,policy.func = 'policy',policy.pars = list(exp.prof=0.05,bet=0.2,hold.time=30))
policy<-function(signals,market,opened.pos,money,bet=0.2,hold.time=30,exp.prof=0.025,max.loss=0.05)
{
d<-NROW(market)
orders<-NULL
n0s<-NROW(opened.pos)
if(!n0s && signals[d]=='h')
return(orders)
if(signals[d]=='b')
{
quant<-round(bet*money/Cl(market)[d],0)
if(quant>0)
orders<-rbind(orders,data.frame(order=c(1,-1,-1),order.type=c(1,2,3),val=c(quant,Cl(market)[d]*(1+exp.prof),Cl(market)[d]*(1-max.loss)),action=c('open','close','close'),posID=c(NA,NA,NA)))
}
else if(signals[d]=='s')
{
need2buy<-sum(opened.pos[opened.pos[,'pos.type']==-1,"N.Stocks"])*Cl(market)[d]
quant<-round(bet*(money-need2buy)/Cl(market)[d],0)
if(quant>0)
orders<-rbind(orders,data.frame(order=c(1,-1,-1),order.type=c(1,2,3),val=c(quant,Cl(market)[d]*(1+exp.prof),Cl(market)[d]*(1-max.loss)),action=c('open','close','close'),posID=c(NA,NA,NA)))
}
orders
}
start<-1
len.train<-1000
len.test<-500
train<-start:(start+len.train-1)
test<-(start+len.train):(start+len.train+len.test-1)
data("GSPC")
date<-rownames(Tdata.train[start+len.train,])
marketTP<-GSPC[paste(date,'/',sep=' ')][1:len.test]
library(e1071)
s<-svm(T.form,Tdata.train[train,],cost=10,gamma = 0.01)
p<-predict(s,Tdata.train[test,])
tssig<-trading.signals(p,0.1,-0.1)
simulated_trader=trading.simulator(marketTP,signals = tssig,policy.func = 'policy',policy.pars = list(exp.prof=0.05,bet=0.2,hold.time=30))
simulated_trader
policy<-function(signals,market,pos,money,bet=0.2,hold.time=30,exp.prof=0.025,max.loss=0.05)
{
d<-NROW(market)
orders<-NULL
n0s<-NROW(pos)
if(!n0s && signals[d]=='h')
return(orders)
if(signals[d]=='b')
{
quant<-round(bet*money/Cl(market)[d],0)
if(quant>0)
orders<-rbind(orders,data.frame(order=c(1,-1,-1),order.type=c(1,2,3),val=c(quant,Cl(market)[d]*(1+exp.prof),Cl(market)[d]*(1-max.loss)),action=c('open','close','close'),posID=c(NA,NA,NA)))
}
else if(signals[d]=='s')
{
need2buy<-sum(pos[pos[,'pos.type']==-1,"N.Stocks"])*Cl(market)[d]
quant<-round(bet*(money-need2buy)/Cl(market)[d],0)
if(quant>0)
orders<-rbind(orders,data.frame(order=c(1,-1,-1),order.type=c(1,2,3),val=c(quant,Cl(market)[d]*(1+exp.prof),Cl(market)[d]*(1-max.loss)),action=c('open','close','close'),posID=c(NA,NA,NA)))
}
orders
}
start<-1
len.train<-1000
len.test<-500
train<-start:(start+len.train-1)
test<-(start+len.train):(start+len.train+len.test-1)
data("GSPC")
date<-rownames(Tdata.train[start+len.train,])
marketTP<-GSPC[paste(date,'/',sep=' ')][1:len.test]
library(e1071)
s<-svm(T.form,Tdata.train[train,],cost=10,gamma = 0.01)
p<-predict(s,Tdata.train[test,])
tssig<-trading.signals(p,0.1,-0.1)
simulated_trader=trading.simulator(marketTP,signals = tssig,policy.func = 'policy',policy.pars = list(exp.prof=0.05,bet=0.2,hold.time=30))
simulated_trader
policy<-function(signals,market,pos,money,bet=0.2,hold.time=30,exp.prof=0.025,max.loss=0.05)
{
d<-NROW(market)
orders<-NULL
n0s<-NROW(pos)
if(!n0s && signals[d]=='h')
return(orders)
if(signals[d]=='b')
{
quant<-round(bet*money/Cl(market)[d],0)
if(quant>0)
orders<-rbind(orders,data.frame(order=c(1,-1,-1),order.type=c(1,2,3),val=c(quant,Cl(market)[d]*(1+exp.prof),Cl(market)[d]*(1-max.loss)),action=c('open','close','close'),posID=c(NA,NA,NA)))
}
else if(signals[d]=='s')
{
need2buy<-sum(pos[pos[,'pos.type']==-1,"N.Stocks"])*Cl(market)[d]
quant<-round(bet*(money-need2buy)/Cl(market)[d],0)
if(quant>0)
orders<-rbind(orders,data.frame(order=c(1,-1,-1),order.type=c(1,2,3),val=c(quant,Cl(market)[d]*(1+exp.prof),Cl(market)[d]*(1-max.loss)),action=c('open','close','close'),posID=c(NA,NA,NA)))
}
orders
}
start<-1
len.train<-1000
len.test<-500
train<-start:(start+len.train-1)
test<-(start+len.train):(start+len.train+len.test-1)
data("GSPC")
date<-rownames(Tdata.train[start+len.train,])
marketTP<-GSPC[paste(date,'/',sep=' ')][1:len.test]
library(e1071)
s<-svm(T.form,Tdata.train[train,],cost=10,gamma = 0.01)
p<-predict(s,Tdata.train[test,])
tssig<-trading.signals(p,0.1,-0.1)
simulated_trader=trading.simulator(marketTP,signals = tssig,policy.func = 'policy',policy.pars = list(exp.prof=0.05,bet=0.2,hold.time=30))
simulated_trader
policy<-function(signals,market,pos,money,bet=0.2,hold.time=30,exp.prof=0.025,max.loss=0.05)
{
d<-NROW(market)
orders<-NULL
n0s<-NROW(pos)
if(!n0s && signals[d]=='h')
return(orders)
if(signals[d]=='b')
{
quant<-round(bet*money/Cl(market)[d],0)
if(quant>0)
orders<-rbind(orders,data.frame(order=c(1,-1,-1),order.type=c(1,2,3),val=c(quant,Cl(market)[d]*(1+exp.prof),Cl(market)[d]*(1-max.loss)),action=c('open','close','close'),posID=c(NA,NA,NA)))
}
else if(signals[d]=='s')
{
need2buy<-sum(pos[pos[,'pos.type']==-1,"N.Stocks"])*Cl(market)[d]
quant<-round(bet*(money-need2buy)/Cl(market)[d],0)
if(quant>0)
orders<-rbind(orders,data.frame(order=c(1,-1,-1),order.type=c(1,2,3),val=c(quant,Cl(market)[d]*(1+exp.prof),Cl(market)[d]*(1-max.loss)),action=c('open','close','close'),posID=c(NA,NA,NA)))
}
orders
}
start<-1
len.train<-1000
len.test<-500
train<-start:(start+len.train-1)
test<-(start+len.train):(start+len.train+len.test-1)
data("GSPC")
date<-rownames(Tdata.train[start+len.train,])
marketTP<-GSPC[paste(date,'/',sep=' ')][1:len.test]
library(e1071)
s<-svm(T.form,Tdata.train[train,],cost=10,gamma = 0.01)
p<-predict(s,Tdata.train[test,])
tssig<-trading.signals(p,0.1,-0.1)
simulated_trader=trading.simulator(marketTP,signals = tssig,policy.func = 'policy',policy.pars = list(exp.prof=0.05,bet=0.2,hold.time=30))
simulated_trader
policy<-function(signals,market,pos,money,bet=0.2,hold.time=30,exp.prof=0.025,max.loss=0.05)
{
d<-NROW(market)
orders<-NULL
n0s<-NROW(pos)
if(!n0s && signals[d]=='h')
return(orders)
if(signals[d]=='b')
{
quant<-round(bet*money/Cl(market)[d],0)
if(quant>0)
orders<-rbind(orders,data.frame(order=c(1,-1,-1),order.type=c(1,2,3),val=c(quant,Cl(market)[d]*(1+exp.prof),Cl(market)[d]*(1-max.loss)),action=c('open','close','close'),posID=c(NA,NA,NA)))
}
else if(signals[d]=='s')
{
need2buy<-sum(pos[pos[,'pos.type']==-1,"N.Stocks"])*Cl(market)[d]
quant<-round(bet*(money-need2buy)/Cl(market)[d],0)
if(quant>0)
orders<-rbind(orders,data.frame(order=c(-1,1,1),order.type=c(1,2,3),val=c(quant,Cl(market)[d]*(1+exp.prof),Cl(market)[d]*(1-max.loss)),action=c('open','close','close'),posID=c(NA,NA,NA)))
}
orders
}
start<-1
len.train<-1000
len.test<-500
train<-start:(start+len.train-1)
test<-(start+len.train):(start+len.train+len.test-1)
data("GSPC")
date<-rownames(Tdata.train[start+len.train,])
marketTP<-GSPC[paste(date,'/',sep=' ')][1:len.test]
library(e1071)
s<-svm(T.form,Tdata.train[train,],cost=10,gamma = 0.01)
p<-predict(s,Tdata.train[test,])
tssig<-trading.signals(p,0.1,-0.1)
simulated_trader=trading.simulator(marketTP,signals = tssig,policy.func = 'policy',policy.pars = list(exp.prof=0.05,bet=0.2,hold.time=30))
simulated_trader
policy<-function(signals,market,pos,money,bet=0.2,hold.time=30,exp.prof=0.025,max.loss=0.05)
{
d<-NROW(market)
orders<-NULL
n0s<-NROW(pos)
if(!n0s && signals[d]=='h')
return(orders)
if(signals[d]=='b')
{
quant<-round(bet*money/Cl(market)[d],0)
if(quant>0)
orders<-rbind(orders,data.frame(order=c(1,-1,-1),order.type=c(1,2,3),val=c(quant,Cl(market)[d]*(1+exp.prof),Cl(market)[d]*(1-max.loss)),action=c('open','close','close'),posID=c(NA,NA,NA)))
}
else if(signals[d]=='s')
{
need2buy<-sum(pos[pos[,'pos.type']==-1,"N.Stocks"])*Cl(market)[d]
quant<-round(bet*(money-need2buy)/Cl(market)[d],0)
if(quant>0)
orders<-rbind(orders,data.frame(order=c(-1,1,1),order.type=c(1,2,3),val=c(quant,Cl(market)[d]*(1+exp.prof),Cl(market)[d]*(1-max.loss)),action=c('open','close','close'),posID=c(NA,NA,NA)))
}
orders
}
start<-1
len.train<-1000
len.test<-500
train<-start:(start+len.train-1)
test<-(start+len.train):(start+len.train+len.test-1)
data("GSPC")
date<-rownames(Tdata.train[start+len.train,])
marketTP<-GSPC[paste(date,'/',sep=' ')][1:len.test]
library(e1071)
s<-svm(T.form,Tdata.train[train,],cost=10,gamma = 0.01)
p<-predict(s,Tdata.train[test,])
tssig<-trading.signals(p,0.1,-0.1)
simulated_trader=trading.simulator(marketTP,signals = tssig,policy.func = 'policy',policy.pars = list(exp.prof=0.05,bet=0.2,hold.time=30))
simulated_trader
policy<-function(signals,market,opened.pos,money,bet=0.2,hold.time=30,exp.prof=0.025,max.loss=0.05)
{
d<-NROW(market)
orders<-NULL
n0s<-NROW(opened.pos)
if(!n0s && signals[d]=='h')
return(orders)
if(signals[d]=='b')
{
quant<-round(bet*money/Cl(market)[d],0)
if(quant>0)
orders<-rbind(orders,data.frame(order=c(1,-1,-1),order.type=c(1,2,3),val=c(quant,Cl(market)[d]*(1+exp.prof),Cl(market)[d]*(1-max.loss)),action=c('open','close','close'),posID=c(NA,NA,NA)))
}
else if(signals[d]=='s')
{
need2buy<-sum(opened.pos[opened.pos[,'pos.type']==-1,"N.Stocks"])*Cl(market)[d]
quant<-round(bet*(money-need2buy)/Cl(market)[d],0)
if(quant>0)
orders<-rbind(orders,data.frame(order=c(-1,1,1),order.type=c(1,2,3),val=c(quant,Cl(market)[d]*(1+exp.prof),Cl(market)[d]*(1-max.loss)),action=c('open','close','close'),posID=c(NA,NA,NA)))
}
orders
}
start<-1
len.train<-1000
len.test<-500
train<-start:(start+len.train-1)
test<-(start+len.train):(start+len.train+len.test-1)
data("GSPC")
date<-rownames(Tdata.train[start+len.train,])
marketTP<-GSPC[paste(date,'/',sep=' ')][1:len.test]
library(e1071)
s<-svm(T.form,Tdata.train[train,],cost=10,gamma = 0.01)
p<-predict(s,Tdata.train[test,])
tssig<-trading.signals(p,0.1,-0.1)
simulated_trader=trading.simulator(marketTP,signals = tssig,policy.func = 'policy',policy.pars = list(exp.prof=0.05,bet=0.2,hold.time=30))
simulated_trader
gspc
policy<-function(signals,market,opened.pos,money,bet=0.2,hold.time=30,exp.prof=0.025,max.loss=0.05)
{
d<-NROW(market)
orders<-NULL
n0s<-NROW(opened.pos)
if(!n0s && signals[d]=='h')
return(orders)
if(signals[d]=='b')
{
quant<-round(bet*money/Cl(market)[d],0)
if(quant>0)
orders<-rbind(orders,data.frame(order=c(1,-1,-1),order.type=c(1,2,3),val=c(quant,Cl(market)[d]*(1+exp.prof),Cl(market)[d]*(1-max.loss)),action=c('open','close','close'),posID=c(NA,NA,NA)))
}
else if(signals[d]=='s')
{
need2buy<-sum(opened.pos[opened.pos[,'pos.type']==-1,"N.Stocks"])*Cl(market)[d]
quant<-round(bet*(money-need2buy)/Cl(market)[d],0)
if(quant>0)
orders<-rbind(orders,data.frame(order=c(-1,1,1),order.type=c(1,2,3),val=c(quant,Cl(market)[d]*(1+exp.prof),Cl(market)[d]*(1-max.loss)),action=c('open','close','close'),posID=c(NA,NA,NA)))
}
orders
}
start<-1
len.train<-1000
len.test<-500
train<-start:(start+len.train-1)
test<-(start+len.train):(start+len.train+len.test-1)
data(gspc)
date<-rownames(Tdata.train[start+len.train,])
marketTP<-gspc[paste(date,'/',sep=' ')][1:len.test]
library(e1071)
s<-svm(T.form,Tdata.train[train,],cost=10,gamma = 0.01)
p<-predict(s,Tdata.train[test,])
tssig<-trading.signals(p,0.1,-0.1)
t1=trading.simulator(marketTP,signals = tssig,policy.func = 'policy',policy.pars = list(exp.prof=0.05,bet=0.2,hold.time=30))
t1
policy<-function(signals,market,opened.pos,money,bet=0.2,hold.time=30,exp.prof=0.025,max.loss=0.05)
{
d<-NROW(market)
orders<-NULL
n0s<-NROW(opened.pos)
if(!n0s && signals[d]=='h')
return(orders)
if(signals[d]=='b')
{
quant<-round(bet*money/Cl(market)[d],0)
if(quant>0)
orders<-rbind(orders,data.frame(order=c(1,-1,-1),order.type=c(1,2,3),val=c(quant,Cl(market)[d]*(1+exp.prof),Cl(market)[d]*(1-max.loss)),action=c('open','close','close'),posID=c(NA,NA,NA)))
}
else if(signals[d]=='s')
{
need2buy<-sum(opened.pos[opened.pos[,'pos.type']==1,"N.Stocks"])*Cl(market)[d]
quant<-round(bet*(money-need2buy)/Cl(market)[d],0)
if(quant>0)
orders<-rbind(orders,data.frame(order=c(-1,1,1),order.type=c(1,2,3),val=c(quant,Cl(market)[d]*(1+exp.prof),Cl(market)[d]*(1-max.loss)),action=c('open','close','close'),posID=c(NA,NA,NA)))
}
orders
}
start<-1
len.train<-1000
len.test<-500
train<-start:(start+len.train-1)
test<-(start+len.train):(start+len.train+len.test-1)
data(gspc)
date<-rownames(Tdata.train[start+len.train,])
marketTP<-gspc[paste(date,'/',sep=' ')][1:len.test]
library(e1071)
s<-svm(T.form,Tdata.train[train,],cost=10,gamma = 0.01)
p<-predict(s,Tdata.train[test,])
tssig<-trading.signals(p,0.1,-0.1)
t1=trading.simulator(marketTP,signals = tssig,policy.func = 'policy',policy.pars = list(exp.prof=0.05,bet=0.2,hold.time=30))
t1
policy<-function(signals,market,opened.pos,money,bet=0.2,hold.time=30,exp.prof=0.025,max.loss=0.05)
{
d<-NROW(market)
orders<-NULL
n0s<-NROW(opened.pos)
if(!n0s && signals[d]=='h')
return(orders)
if(signals[d]=='b')
{
quant<-round(bet*money/Cl(market)[d],0)
if(quant>0)
orders<-rbind(orders,data.frame(order=c(1,-1,-1),order.type=c(1,2,3),val=c(quant,Cl(market)[d]*(1+exp.prof),Cl(market)[d]*(1-max.loss)),action=c('open','close','close'),posID=c(NA,NA,NA)))
}
else if(signals[d]=='s')
{
need2buy<-sum(opened.pos[opened.pos[,'pos.type']==0,"N.Stocks"])*Cl(market)[d]
quant<-round(bet*(money-need2buy)/Cl(market)[d],0)
if(quant>0)
orders<-rbind(orders,data.frame(order=c(-1,1,1),order.type=c(1,2,3),val=c(quant,Cl(market)[d]*(1+exp.prof),Cl(market)[d]*(1-max.loss)),action=c('open','close','close'),posID=c(NA,NA,NA)))
}
orders
}
start<-1
len.train<-1000
len.test<-500
train<-start:(start+len.train-1)
test<-(start+len.train):(start+len.train+len.test-1)
data(gspc)
date<-rownames(Tdata.train[start+len.train,])
marketTP<-gspc[paste(date,'/',sep=' ')][1:len.test]
library(e1071)
s<-svm(T.form,Tdata.train[train,],cost=10,gamma = 0.01)
p<-predict(s,Tdata.train[test,])
tssig<-trading.signals(p,0.1,-0.1)
t1=trading.simulator(marketTP,signals = tssig,policy.func = 'policy',policy.pars = list(exp.prof=0.05,bet=0.2,hold.time=30))
t1
policy<-function(signals,market,opened.pos,money,bet=0.2,exp.prof=0.025,max.loss=0.05)
{
d<-NROW(market)
orders<-NULL
n0s<-NROW(opened.pos)
if(!n0s && signals[d]=='h')
return(orders)
if(signals[d]=='b')
{
quant<-round(bet*money/Cl(market)[d],0)
if(quant>0)
orders<-rbind(orders,data.frame(order=c(1,-1,-1),order.type=c(1,2,3),val=c(quant,Cl(market)[d]*(1+exp.prof),Cl(market)[d]*(1-max.loss)),action=c('open','close','close'),posID=c(NA,NA,NA)))
}
else if(signals[d]=='s')
{
need2buy<-sum(opened.pos[opened.pos[,'pos.type']==0,"N.Stocks"])*Cl(market)[d]
quant<-round(bet*(money-need2buy)/Cl(market)[d],0)
if(quant>0)
orders<-rbind(orders,data.frame(order=c(-1,1,1),order.type=c(1,2,3),val=c(quant,Cl(market)[d]*(1+exp.prof),Cl(market)[d]*(1-max.loss)),action=c('open','close','close'),posID=c(NA,NA,NA)))
}
orders
}
start<-1
len.train<-1000
len.test<-500
train<-start:(start+len.train-1)
test<-(start+len.train):(start+len.train+len.test-1)
data(gspc)
date<-rownames(Tdata.train[start+len.train,])
marketTP<-gspc[paste(date,'/',sep=' ')][1:len.test]
library(e1071)
s<-svm(T.form,Tdata.train[train,],cost=10,gamma = 0.01)
p<-predict(s,Tdata.train[test,])
tssig<-trading.signals(p,0.1,-0.1)
t1=trading.simulator(marketTP,signals = tssig,policy.func = 'policy',policy.pars = list(exp.prof=0.05,bet=0.2))
t1
policy<-function(signals,market,opened.pos,money,bet=0.2,exp.prof=0.025,max.loss=0.05)
{
d<-NROW(market)
orders<-NULL
n0s<-NROW(opened.pos)
if(!n0s && signals[d]=='h')
return(orders)
if(signals[d]=='b')
{
quant<-round(bet*money/Cl(market)[d],0)
if(quant>0)
orders<-rbind(orders,data.frame(order=c(1,-1,-1),order.type=c(1,2,3),val=c(quant,Cl(market)[d]*(1+exp.prof),Cl(market)[d]*(1-max.loss)),action=c('open','close','close'),posID=c(NA,NA,NA)))
}
else if(signals[d]=='s')
{
need2buy<-sum(opened.pos[opened.pos[,'pos.type']==-1,"N.Stocks"])*Cl(market)[d]
quant<-round(bet*(money-need2buy)/Cl(market)[d],0)
if(quant>0)
orders<-rbind(orders,data.frame(order=c(-1,1,1),order.type=c(1,2,3),val=c(quant,Cl(market)[d]*(1+exp.prof),Cl(market)[d]*(1-max.loss)),action=c('open','close','close'),posID=c(NA,NA,NA)))
}
orders
}
start<-1
len.train<-1000
len.test<-500
train<-start:(start+len.train-1)
test<-(start+len.train):(start+len.train+len.test-1)
data(gspc)
date<-rownames(Tdata.train[start+len.train,])
marketTP<-gspc[paste(date,'/',sep=' ')][1:len.test]
library(e1071)
s<-svm(T.form,Tdata.train[train,],cost=10,gamma = 0.01)
p<-predict(s,Tdata.train[test,])
tssig<-trading.signals(p,0.1,-0.1)
t1=trading.simulator(marketTP,signals = tssig,policy.func = 'policy',policy.pars = list(exp.prof=0.05,bet=0.2))
t1
start<-1
len.train<-1000
len.test<-500
train<-start:(start+len.train-1)
test<-(start+len.train):(start+len.train+len.test-1)
#obtaining quotes for the testing period
data("GSPC")
date<-rownames(Tdata.train[start+len.train,])
marketTP<-gspc[paste(date,'/',sep=' ')][1:len.test]
#learning the model and obtaining its signal predictions for test period
library(e1071)
s<-svm(T.form,Tdata.train[train,],cost=10,gamma = 0.01)
p<-predict(s,Tdata.train[test,])
tssig<-trading.signals(p,0.1,-0.1)
#now using the simulated trader for testing period
simulated_trader=trading.simulator(marketTP,signals = tssig,
policy.func = 'policy.1',policy.pars = list(exp.prof=0.05,bet=0.2))
policy.1 <- function(signals,market,opened.pos,money,bet=0.2,hold.time=10,
exp.prof=0.025, max.loss= 0.05)
d <- NROW(market)
orders <- NULL
nOs <- NROW(opened.pos)
if (!nOs && signals[d] == 'h') return(orders)
if (signals[d] == 'b' && !nOs) {
quant <- round(bet*money/Cl(market)[d],0)
if (quant > 0)
orders <- rbind(orders,
data.frame(order=c(1,-1,-1),order.type=c(1,2,3),
val = c(quant,
Cl(market)[d]*(1+exp.prof),
Cl(market)[d]*(1-max.los)),
action = c('open','close','close'),
posID = c(NA,NA,NA)))
} else if (signals[d] == 's' && !nOs) {
need2buy <- sum(opened.pos[opened.pos[,'pos.type']==-1,
"N.stocks"])*Cl(market)[d]
quant <- round(bet*(money-need2buy)/Cl(market)[d],0)
if (quant > 0)
orders <- rbind(orders,
data.frame(order=c(-1,1,1),order.type=c(1,2,3),
val = c(quant,
Cl(market)[d]*(1-exp.prof),
Cl(market)[d]*(1+max.loss)),
action = c('open','close','close'),
posID = c(NA,NA,NA)
)
)}
r
if (nOs)
for(i in 1:nOs) {
if (d - opened.pos[i,'Odate'] >= hold.time)
orders <- rbind(orders,
data.frame(order=-opened.pos[i,'pos.type'],
order.type=1,
val = NA,
action = 'close',
posID = rownames(opened.pos)[i]
))}
orders
}
